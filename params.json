{"name":"Python-nutritionix","tagline":"Nutritionix API Python wrapper","body":"python-nutritionix\r\n==================\r\n\r\nNutritionix API Python wrapper\r\n\r\n![Nutritionix API Credit](https://d3jpl91pxevbkh.cloudfront.net/nutritionix/image/upload/v1363458498/attribution_jqfdgy.png)\r\n\r\n\r\nInstalling\r\n==========\r\n\r\n`pip install nutritionix`\r\n\r\nDependencies\r\n------------\r\n\r\nRequires [Requests](http://docs.python-requests.org/en/latest/).\r\n\r\n\r\nConfig\r\n======\r\n\r\nYou'll need an api key and app id which is tied to a developer account at\r\nhttps://developer.nutritionix.com\r\n\r\nYou may provide these parameters in your code or with the environment variables\r\n`NIX_APP_ID` &amp; `NIX_API_KEY`\r\n\r\n\r\nUsage\r\n=====\r\n\r\n#### Instantiate ####\r\n\r\nFirst, instantiate the API wrapper object\r\n\r\n    from nutritionix import Nutrtionix\r\n    nix = Nutritionix(app_id=\"123456789\", api_key=\"XXXYYYZZZ\")\r\n\r\nOr if you have configured the environment variables, simply\r\n\r\n    from nutritionix import Nutrtionix\r\n    nix = Nutritionix()\r\n\r\n#### Define request ####\r\n\r\nDefining a request is simply chaining a method to the API wrapper instance\r\n\r\n    pizza = nix.search(\"pizza\")\r\n\r\nThat will return a new wrapper object which will perform a search for pizza.\r\n\r\n#### Retrieve results ####\r\n\r\nWe can retrieve the parsed JSON results easily by using the json method\r\n\r\n    results = pizza.json()\r\n\r\nAll of this could also be written more concisely as\r\n\r\n    nix.search('pizza').json()\r\n\r\n#### Using parameters ####\r\n\r\nOf course adding parameters is easy- just pass them as keyword arguments\r\nto the method\r\n\r\n    nix.search('pizza', results=\"0:1\").json()\r\n\r\n#### Using NXQL ####\r\n\r\nAnd making use of NXQL is also straight forward by using a call to search with\r\nno arguments and calling the nxql method with your desired query expressed as\r\nkeyword arguments (filters, queries, or query)\r\n\r\n    nix.search().nxql(\r\n        filters={\r\n            \"nf_calories\": {\r\n                \"lte\": 500\r\n            }\r\n        },\r\n        fields=[\"item_name\", \"item_id\", \"nf_calories\"]\r\n    ).json()\r\n\r\n\r\nExamples\r\n========\r\n\r\n### Search ###\r\n\r\n    >>> nix.search(\"big mac\", results=\"0:1\").json()\r\n    {u'hits': [{u'_id': u'513fc9e73fe3ffd40300109f',\r\n                u'_index': u'nixProductionV9',\r\n                u'_score': 1.1813704,\r\n                u'_type': u'item',\r\n                u'fields': {u'brand_name': u\"McDonald's\",\r\n                            u'item_id': u'513fc9e73fe3ffd40300109f',\r\n                            u'item_name': u'Big Mac'}}],\r\n     u'max_score': 1.1813704,\r\n     u'total_hits': 1050}\r\n\r\n### Items ###\r\n\r\n    >>> nix.item(id=\"513fc9e73fe3ffd40300109f\").json()\r\n    {u'allergen_contains_eggs': None,\r\n     u'allergen_contains_fish': None,\r\n     u'allergen_contains_gluten': None,\r\n     u'allergen_contains_milk': None,\r\n     u'allergen_contains_peanuts': None,\r\n     u'allergen_contains_shellfish': None,\r\n     u'allergen_contains_soybeans': None,\r\n     u'allergen_contains_tree_nuts': None,\r\n     u'allergen_contains_wheat': None,\r\n     u'brand_id': u'513fbc1283aa2dc80c000053',\r\n     u'brand_name': u\"McDonald's\",\r\n     u'item_description': u'7.6 oz (215 g)',\r\n     u'item_id': u'513fc9e73fe3ffd40300109f',\r\n     u'item_name': u'Big Mac',\r\n     u'leg_loc_id': 114,\r\n     u'nf_calcium_dv': 25,\r\n     u'nf_calories': 550,\r\n     u'nf_calories_from_fat': 260,\r\n     u'nf_cholesterol': 75,\r\n     u'nf_dietary_fiber': 3,\r\n     u'nf_ingredient_statement': u'100% Beef Patty...',\r\n     u'nf_iron_dv': 25,\r\n     u'nf_monounsaturated_fat': None,\r\n     u'nf_polyunsaturated_fat': None,\r\n     u'nf_protein': 25,\r\n     u'nf_refuse_pct': None,\r\n     u'nf_saturated_fat': 10,\r\n     u'nf_serving_size_qty': 1,\r\n     u'nf_serving_size_unit': u'Burger',\r\n     u'nf_serving_weight_grams': 215,\r\n     u'nf_servings_per_container': None,\r\n     u'nf_sodium': 970,\r\n     u'nf_sugars': 9,\r\n     u'nf_total_carbohydrate': 46,\r\n     u'nf_total_fat': 29,\r\n     u'nf_trans_fatty_acid': 1,\r\n     u'nf_vitamin_a_dv': 4,\r\n     u'nf_vitamin_c_dv': 2,\r\n     u'nf_water_grams': None,\r\n     u'old_api_id': None,\r\n     u'updated_at': u'2013-06-28T17:53:50.000Z'}\r\n\r\n### Brand Search ###\r\n\r\n    >>> nix.brand().search(query=\"mcdonalds\").json()\r\n    {u'hits': [{u'_id': u'513fbc1283aa2dc80c000053',\r\n     u'_index': u'nixproductionv13',\r\n     u'_score': 7.1310086,\r\n     u'_type': u'brand',\r\n     u'fields': {u'_id': u'513fbc1283aa2dc80c000053',\r\n     u'name': u\"McDonald's\",\r\n     u'type': 1,\r\n     u'website': u'http://www.mcdonalds.com'}}],\r\n     u'max_score': 7.1310086,\r\n     u'total': 1}\r\n\r\n### Brands ###\r\n\r\n    >>> nix.brand(\"513fbc1283aa2dc80c000053\").json()\r\n    {u'brand_id': u'513fbc1283aa2dc80c000053',\r\n     u'created_at': u'2011-07-01 08:45:47',\r\n     u'name': u\"McDonald's\",\r\n     u'old_api_id': u'0PewL8juRBSozVk',\r\n     u'type': 1,\r\n     u'updated_at': u'2013-06-26T11:36:25.468Z',\r\n     u'website': u'http://www.mcdonalds.com'}\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}